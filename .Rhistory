ui <- fluidPage(
sliderInput(inputId = "year",
label = "Choose year",
value = 1990,
min = 1962, max = 2018,
step = 1),
checkboxInput(inputId = "density",
label = strong("Show density estimate"),
value = FALSE),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
plotOutput(outputId = "hist"),
checkboxGroupInput(inputId = "industry",
label = "Choose industry",
selected = 36,
choices = industries)
)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
}
shinyApp(ui = ui, server =  server)
ui <- fluidPage(
titlePanel("Net Income Distribution"),
sidebarLayout(
# Define the sidebar with inputs
sidebarPanel(
sliderInput(inputId = "year", label = "Choose year", value = 1990, min = 1962, max = 2018, step = 1),
checkboxInput(inputId = "density", label = strong("Show density estimate"), value = FALSE),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)),
checkboxGroupInput(inputId = "industry", label = "Choose industry", selected = 36, choices = industries),
hr(),
helpText("Data from Compustat")),
mainPanel(plotOutput(outputId = "hist"))
)
)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
}
shinyApp(ui = ui, server =  server)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
plot(x = niq.agg$datcqtr, y = niq.agg$nig.sum, type = 'l', main = "Total Net Income")
})
}
shinyApp(ui = ui, server =  server)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
plot(niq.agg$nig.sum, type = 'l', main = "Total Net Income")
})
}
shinyApp(ui = ui, server =  server)
o2 <- which(X$sic2 %in% c(36))
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
View(niq.agg)
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
plot(niq.sum ~ datacqtr, data = niq.agg, type = 'l', main = "Total Net Income")
plot(x = nig.agg$datacqtr, y = niq.agg$niq.sum, type = 'l', main = "Total Net Income")
plot(x = niq.agg$datacqtr, y = niq.agg$niq.sum, type = 'l', main = "Total Net Income")
niq.agg <- complete.cases(niq.agg)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg)]
o2 <- which(X$sic2 %in% c(36))
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(x = niq.agg$datacqtr, y = niq.agg$niq.sum, type = 'l', main = "Total Net Income")
summary(niq.agg$datacqtr)
table(niq.agg$datacqtr)
?complete.cases
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
o2 <- which(X$sic2 %in% input$industry)
o2 <- which(X$sic2 %in% c(36))
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
})
}
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
})
}
shinyApp(ui = ui, server =  server)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
})
output$tsplot <- renderPlot({
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
})
}
shinyApp(ui = ui, server =  server)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
output$tsplot <- renderPlot({
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
})
}
shinyApp(ui = ui, server =  server)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
output$tsplot <- renderPlot({
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
})
}
shinyApp(ui = ui, server =  server)
mainPanel("main panel",
fluidRow(
splitLayout(
cellWidths = c("50%", "50%"),
plotOutput("plotgraph1"),
plotOutput("plotgraph2"))))
?plotOutput
ui <- fluidPage(
titlePanel("Net Income Distribution"),
sidebarLayout(
# Define the sidebar with inputs
sidebarPanel(
sliderInput(inputId = "year", label = "Choose year", value = 1990, min = 1962, max = 2018, step = 1),
checkboxInput(inputId = "density", label = strong("Show density estimate"), value = FALSE),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)),
checkboxGroupInput(inputId = "industry", label = "Choose industry", selected = 36, choices = industries),
hr(),
helpText("Data from Compustat")),
#mainPanel(plotOutput(outputId = "hist"))
mainPanel("main panel",
fluidRow(
splitLayout(
cellWidths = c("50%", "50%"),
plotOutput("hist"),
plotOutput("tsplot"))))
)
)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
output$tsplot <- renderPlot({
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
})
}
shinyApp(ui = ui, server =  server)
?fluidRow
ui <- fluidPage(
titlePanel("Net Income Distribution"),
sidebarLayout(
# Define the sidebar with inputs
sidebarPanel(
sliderInput(inputId = "year", label = "Choose year", value = 1990, min = 1962, max = 2018, step = 1),
checkboxInput(inputId = "density", label = strong("Show density estimate"), value = FALSE),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)),
checkboxGroupInput(inputId = "industry", label = "Choose industry", selected = 36, choices = industries),
hr(),
helpText("Data from Compustat")),
#mainPanel(plotOutput(outputId = "hist"))
#mainPanel("main panel",
#         fluidRow(
#          splitLayout(
#           cellWidths = c("50%", "50%"),
#          plotOutput("hist"),
#         plotOutput("tsplot"))))
mainPanel("main panel", plotOutput("hist"),  plotOutput("tsplot"))
)
)
server <-  function(input, output){
output$hist <- renderPlot({
o <- which(X$fyearq == input$year & X$sic2 %in% input$industry)
title = paste(length(o), " Firms")
hist(X[o, "niq"], main = title, xlab = "Net Income", probability = TRUE, breaks = 40)
if (input$density) {
dens <- density(X[o, "niq"], adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
output$tsplot <- renderPlot({
o2 <- which(X$sic2 %in% input$industry)
niq.agg <- aggregate(X[o2, "niq"], by = list(X[o2, "datacqtr"]), FUN = sum, na.rm = TRUE)
names(niq.agg) <- c("datacqtr", "niq.sum")
niq.agg <- niq.agg[complete.cases(niq.agg), ]
plot(niq.agg$niq.sum, type = 'l', main = "Total Net Income")
})
}
shinyApp(ui = ui, server =  server)
library(ggplot2)
rm(list=ls())
gc()
library(ggplot2)
setwd("C:/Users/Reginald/Dropbox/Research/ceres")
rm(list=ls())
gc()
load("../0_datasets/comp_fundq.RData")
X <- comp.fundq
source("../0_code/useful-fn.R")
X <- lead.df(X, "niq", "gvkey", "qtr")
declines <- 1*(X$niq.lead1 < X$niq)
summary(declines)
negearn <- 1*(X$niq.lead1 < 0)
summary(negearn)
X$decline <- 1*(X$niq.lead1 < X$niq)
X$negearn <- 1*(X$niq.lead1 < 0)
X1 <- aggregate(X$negearn, by = list(X$datacqtr), FUN = mean, na.rm = TRUE)
names(X1) <- c("datacqtr", "mean.negearn")
View(X1)
plot(X1$mean.negearn)
plot(X1$mean.negearn, type = 'l')
mean.declines <- aggregate(X$decline, by = list(X$datacqtr), FUN = mean, na.rm = TRUE)
names(mean.declines) <- c("datacqtr", "mean.decline")
plot(mean.declines$mean.decline, type = 'l')
head(X[which(X$decline == 1), c("tic", "datacqtr", "niq", "niq.lead1")])
load("../0_datasets/comp_fundq.RData")
write.csv(x = comp.fundq, file = "../0_datasets/comp_fundq.csv")
source('../0_datasets/wrds_login.R')
###############################################################################
load('../0_datasets/comp_funda.RData')
###############################################################################
load('../data/comp_funda.RData')
###############################################################################
load('data/comp_funda.RData')
###############################################################################
load('data/comp_funda.RData')
View(comp.funda)
## get year counts for ech firm
x <- aggregate(comp.funda$gvkey, by = list(comp.funda$gvkey), FUN = length)
View(x)
## get year counts for ech firm
gvkey.years <- aggregate(comp.funda$gvkey, by = list(comp.funda$gvkey), FUN = length)
names(gvkey.years) <- c("gvkey", "years")
o <- which(gvkey.years$years >= 10)
x <- comp.funda[o, ]
View(x)
keep.vars <- c("gvkey", "datadate", "fyear", "fyr", "tic", "prcc_f", "seq",
"ceq", "txditc", "txdb", "itcb", "pstkrv", "pstkl", "pstk", "prcc_f", "csho",
"epsfx", "epsfi", "oprepsx", "opeps", "ajex", "ebit", "spi", "nopi", "sale",
"ibadj", "dvc", "dvp", "ib", "oibdp", "dp", "oiadp", "gp", "revt", "cogs",
"pi", "ibc", "dpc", "at", "ni", "ibcom", "icapt", "mib", "ebitda", "xsga",
"xido", "xint", "mii", "ppent", "act", "lct", "dltt", "dlc", "che", "invt",
"lt", "rect", "xopr", "oancf", "txp", "txt", "ap", "xrd", "xad", "xlr", "capx")
x <- comp.funda[o, keep.vars]
View(x)
o <- which(x$fyear >= 2001)
x <- x[o,]
o <- which(comp.funda$fyear >= 2001)
x <- x[o, keep.vars]
gvkey.years <- aggregate(x$gvkey, by = list(x$gvkey), FUN = length)
names(gvkey.years) <- c("gvkey", "years")
o <- which(gvkey.years$years >= 10)
x <- comp.funda[o, keep.vars]
## get year counts for ech firm
o <- which(comp.funda$fyear >= 2001)
x <- x[o, keep.vars]
gvkey.years <- aggregate(x$gvkey, by = list(x$gvkey), FUN = length)
names(gvkey.years) <- c("gvkey", "years")
o <- which(gvkey.years$years >= 10)
gvkey.years <- aggregate(x$gvkey, by = list(x$gvkey), FUN = length)
## get year counts for ech firm
o <- which(comp.funda$fyear >= 2001)
x <- x[o, keep.vars]
x <- comp.funda[o, keep.vars]
gvkey.years <- aggregate(x$gvkey, by = list(x$gvkey), FUN = length)
names(gvkey.years) <- c("gvkey", "years")
o <- which(gvkey.years$years >= 10)
x <- comp.funda[o, keep.vars]
View(x)
x1 <-merge(x, gvkey.years[o,])
View(x1)
## get year counts for ech firm
o <- which(comp.funda$fyear >= 2001)
x <- comp.funda[o, keep.vars]
gvkey.years <- aggregate(x$gvkey, by = list(x$gvkey), FUN = length)
names(gvkey.years) <- c("gvkey", "years")
o <- which(gvkey.years$years >= 10)
x1 <-merge(x, gvkey.years[o,])
View(gvkey.years)
gvkey.years <- gvkey.years[o,]
x1 <-merge(x, gvkey.years)
View(x1)
x1 <- x1[order(x1$gvkey, x1$fyear), ]
## Plot earnings over time
v <- x1[1,"gvkey"]
tic <- x1[1,"tic"]
earnings <- x1[which(x1$gvkey == v), "ni"]
plot(earnings)
plot(earnings,
type="l")
earnings <- x1[which(x1$gvkey == v), c("fyear", "ni")]
plot(earnings,
type="l")
par(mfrow=c(4,4))
for(i in 1:16){
v <- x1[i,"gvkey"]
tic <- x1[i,"tic"]
earnings <- x1[which(x1$gvkey == v), c("fyear", "ni")]
plot(earnings,
type="l", main = tic)
}
for(i in 1:16){
v <- gvkey.years[i,"gvkey"]
tic <- x1[i,"tic"]
earnings <- x1[which(x1$gvkey == v), c("fyear", "ni")]
plot(earnings,
type="l", main = tic)
}
for(i in 1:16){
v <- gvkey.years[i,"gvkey"]
tic <- x1[which(x1$gvkey == v),"tic"]
earnings <- x1[which(x1$gvkey == v), c("fyear", "ni")]
plot(earnings,
type="l", main = tic)
}
for(i in 1:16){
v <- gvkey.years[i,"gvkey"]
tic <- unique(x1[which(x1$gvkey == v),"tic"])
earnings <- x1[which(x1$gvkey == v), c("fyear", "ni")]
plot(earnings,
type="l", main = tic)
}
for(i in 1:16){
v <- gvkey.years[i,"gvkey"]
tic <- unique(x1[which(x1$gvkey == v),"tic"])
earnings <- x1[which(x1$gvkey == v), c("fyear", "ni")]
plot(earnings,
type="l",
main = tic,
xlim=c(2001,2016))
}
load('data/comp_fundq.RData')
head(comp.fundq)
## get year counts for ech firm
o <- which(comp.fundq$fyearq >= 2001)
x <- comp.fundq[o, keep.vars]
x <- comp.fundq[o, c("gvkey", "fyearq", "fyr", "datacqtr", "datafqtr", "tic", "conm", "atq", "niq","cshoq","ceqq","prccq")]
gvkey.quarters <- aggregate(x$gvkey, by = list(x$gvkey), FUN = length)
names(gvkey.years) <- c("gvkey", "quarters")
o <- which(gvkey.years$quarters >= 20)
View(gvkey.quarters)
o <- which(gvkey.years$quarters >= 20)
names(gvkey.quarters) <- c("gvkey", "quarters")
o <- which(gvkey.quarters$quarters >= 20)
gvkey.quarters <- gvkey.quarters[o,]
gvkey.quarters <- gvkey.quarters[o,]
x1 <-merge(x, gvkey.quarters)
x1 <- x1[order(x1$gvkey, x1$fyear), ]
x1 <- x1[order(x1$gvkey, x1$fyearq), ]
x1 <-merge(x, gvkey.quarters)
x1 <- x1[order(x1$gvkey, x1$fyearq), ]
View(x1)
par(mfrow=c(4,4))
for(i in 1:16){
v <- gvkey.quarters[i,"gvkey"]
tic <- unique(x1[which(x1$gvkey == v),"tic"])
earnings <- x1[which(x1$gvkey == v), c("fyearq", "niq")]
plot(earnings,
type="l",
main = tic,
xlim=c(2001,2016))
}
for(i in 1:16){
v <- gvkey.quarters[i,"gvkey"]
tic <- unique(x1[which(x1$gvkey == v),"tic"])
earnings <- x1[which(x1$gvkey == v), c("fyearq", "niq")]
barplot(earnings,
main = tic,
xlim=c(2001,2016))
}
for(i in 1:16){
v <- gvkey.quarters[i,"gvkey"]
tic <- unique(x1[which(x1$gvkey == v),"tic"])
earnings <- x1[which(x1$gvkey == v), c("fyearq", "niq")]
barplot(earnings$niq,
main = tic,
xlim=c(2001,2016))
}
for(i in 1:16){
v <- gvkey.quarters[i,"gvkey"]
tic <- unique(x1[which(x1$gvkey == v),"tic"])
earnings <- x1[which(x1$gvkey == v), c("fyearq", "niq")]
barplot(earnings$niq,
main = tic)
}
library(foreign)
ibescrspcom <- foreign::read.ssd("/media/reggie/reg_ext/0_bigdatasets/ibescrspcomp.sas7bdat")
ibescrspcom <- foreign::read.ssd(sectionnames = "/media/reggie/reg_ext/0_bigdatasets/ibescrspcomp.sas7bdat")
ibescrspcom <- foreign::read.ssd(libname="",
sectionnames = "/media/reggie/reg_ext/0_bigdatasets/ibescrspcomp.sas7bdat")
library(sas7bdat)
install.packages("sas7bdat")
library(haven)
install.packages("haven")
install.packages("haven")
